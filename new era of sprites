#This game is about an undercover alien leaving earth because apocalypse
#initialization
import pygame, random, keyboard,time

#variables
width = 500
height = 600
alienSize = 50
alienX = width / 2
alienY = height - (height / 6) - alienSize
base = height - (height / 6)
score = 0

#player screens
displayScreen = "menu"
gaming = True
beginScoring = False

#colours
white = (255, 255, 255)
black = (0, 0, 0)
yellow = (253, 210, 82)
ground = (84, 109, 0)
green = (5, 172, 81)
bleen = (32, 161, 133)
sky = (164, 221, 237)
sky2 = (171, 146, 255)
trueBlue = (8, 88, 79)
purpatrate = (181, 126, 220)
pink = (240, 84, 85)
pink2 = (108, 0, 44)

#setting up classes (for lives, platforms and the player)
class Lives(pygame.sprite.Sprite):
    def __init__(self, width, height):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface([width, height])

        #loading the image and sizing it
        self.image = pygame.image.load("heart.png").convert_alpha()
        self.mask = pygame.mask.from_surface(self.image)
        self.image = pygame.transform.scale(self.image, (35, 30))
        self.rect = self.image.get_rect()
        self.rect.x = 20
        self.rect.y = 20

class Platforms(pygame.sprite.Sprite):
    def __init__(self, width, height):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface([width, height])

        #loading the image, sizing it
        self.image = pygame.transform.scale(self.image, (100, 20))
        self.mask = pygame.mask.from_surface(self.image)
        self.rect = self.image.get_rect()
        self.changeY = 0
        self.movement = 0

        #colouring
        self.colourG = 255
        self.colourB = 143
        self.colours = (0, 80, 200)
        self.colourRate = 0

    def update(self):
        self.image.fill(self.colours)
        self.rect.y += self.changeY

    #for platform movement with the screem
    def shift(self):
        self.movement = height / 2 - alien.rect.y
        if self.movement != 0 and self.movement > 0:
            self.rect.y += 1
        else:
            self.rect.y += 0

    #colour application
    def colourChange(self):
        if self.colourG > 0.10:
            self.colourG -= 0.05
        if self.colourB < 255.90:
            self.colourB += 0.05
    def disappear(self):
        self.colourRate += 9
        if self.colourRate == 81 * 90:
            self.colours = (69, 69, 69)
        elif self.colourRate == 81 *180:
            self.colours = (9,40,135)
        elif self.colourRate == 81 *270:
            self.colours = (100, 80, 90)

class Player(pygame.sprite.Sprite):
    def __init__(self, width, height):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface([width, height])

        #loading the image and sizing it
        self.image = pygame.image.load("lamb.png").convert_alpha()
        self.mask = pygame.mask.from_surface(self.image)
        self.image = pygame.transform.scale(self.image, (50, 50))

        #defining variables for size, location and jumping
        self.rect = self.image.get_rect()
        self.rect.x = 250
        self.rect.y = base - alienSize
        self.changeX = 0
        self.changeY = 0
        self.gravity = 0
        self.colourG = 255
        self.colourB = 143

    def update(self):
        self.rect.x += self.changeX
        self.rect.y -= self.changeY
        self.changeY -= self.gravity

    #checking for left and right boundaries and player movement functions ... and colour
    def right(self):
        self.changeX = 2
    def left(self):
        self.changeX = -2
    def bounce(self):
        self.changeX *= -1
    def jumpUp(self):
        if self.changeY == 0:
            self.changeY = 4.5
            self.gravity = 0.09
        #colour
        if self.colourG > 0.10:
            self.colourG -= 0.05
        if self.colourB < 255.90:
            self.colourB += 0.05
    def stopX(self):
        self.changeX = 0

pygame.init()
pygame.font.init()

#setting up the game screen
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("( ͡° ͜ʖ ͡°)")
myfont = pygame.font.SysFont('Consolas', 20)

#setting time and fps?
clock = pygame.time.Clock()
clock.tick(60)
pygame.time.set_timer(pygame.USEREVENT, 1000)

#setting up sprite groups
lives = pygame.sprite.Group()
platforms = pygame.sprite.Group()
all = pygame.sprite.Group()
alien = Player(width, height)
all.add(alien)
changeHeartX = 20
changePlatY = 400 - (height / 6)
for i in range(7):
    block = Platforms(width, height + 200)
    if i == 1:
        block.rect.x = 0
        block.rect.y = base
        block.image = pygame.transform.scale(block.image, (width, height - round(base)))
    else:
        block.rect.x = random.randrange(0, width - 100)
        block.rect.y = changePlatY
        block.image = pygame.transform.scale(block.image, (100, 20))
    changePlatY -= (height / 6)
    platforms.add(block)
    all.add(block)
for j in range(3):
    heart = Lives(width, height)
    heart.rect.x = changeHeartX
    heart.rect.y = 20
    changeHeartX += 43
    lives.add(heart)
    all.add(heart)

def menu():
    #background
    screen.fill(black)
    pygame.draw.ellipse(screen, pink, [width / 2 - 700 / 2, height - 500 / 2, 700, 500])

    #title
    myfont = pygame.font.SysFont('Consolas', 20)
    title = myfont.render('Get Me Out of Here', False, white)
    screen.blit(title, (100, 250))
    myfont = pygame.font.SysFont('Consolas', 20)
    toPlay = myfont.render('Press [space] to play', False, pink2)
    toInstruct = myfont.render('Press [i] for instructions', False, pink2)
    screen.blit(toPlay, (125, height - 150))
    screen.blit(toInstruct, (100, height - 100))

def instruct():
    #background
    screen.fill(black)

    #text
    myfont = pygame.font.SysFont('Consolas', 20)
    rightInstruct = myfont.render('Press [right] to move right', False, purpatrate)
    leftInstruct = myfont.render('Press [left] to move left', False, purpatrate)
    screen.blit(rightInstruct, (125, height - 150))
    screen.blit(leftInstruct, (100, height - 100))

def play():
   #the sky
    moonrise = (alien.colourG, alien.colourG, alien.colourG)
    screen.fill(moonrise)

    #scoreboard
    scoreWrite = myfont.render("Score: " + str(score), False, (46, 72, 89))
    screen.blit(scoreWrite, (width - 110, 20))

    #for player jumping
    if keyboard.is_pressed('up'):
        alien.jumpUp()

    #removing lives
    for aLife in lives:
        if alien.rect.y > height:
            aLife.kill()

   #drawing all sprites (platforms and player)
    all.update()
    all.draw(screen)

def win():
    # background
    screen.fill(sky)

def loss():
    # background
    screen.fill(bleen)

    # text
    myfont = pygame.font.SysFont('Consolas', 20)
    mehsage = myfont.render("You lost but that's okay", False, white)
    finalScore = myfont.render('Score: ' + str(score), False, pink2)
    screen.blit(mehsage, (125, height - 150))
    screen.blit(finalScore, (100, height - 100))

while gaming:
    # checking for arrow keys (for going back to the menu screen and player movement)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            gaming = False
        if event.type == pygame.USEREVENT and beginScoring == True:
            score += 1
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                alien.left()
            elif event.key == pygame.K_RIGHT:
                alien.right()
        elif event.type == pygame.KEYUP:
            alien.stopX()

    # checking for right and left boundaries
    if alien.rect.x < 0 or alien.rect.x > width - alienSize:
        alien.bounce()

    # checking for initiation with platforms
    for onePlatform in platforms:
        # if the player passes the halfway point, start score and actual game
        if alien.rect.y < height * (3 / 4):
            beginScoring = True
            onePlatform.shift()

        # checking for player and platform collision
        if pygame.sprite.collide_rect(alien, onePlatform):
            alien.changeY = 0
            onePlatform.disappear()
            if onePlatform.colours == (100, 80, 90):
                onePlatform.kill()

        # generating new platforms and deleting the old ones
        if onePlatform.rect.y > height:
            onePlatform.kill()
            for l in range(1):
                newBlock = Platforms(width, height)
                newBlock.rect.x = random.randrange(0, width - 100)
                newBlock.rect.y = - 100
                platforms.add(newBlock)
                all.add(newBlock)

    #for changing into different screens
    if displayScreen == "menu":
        menu()
        if keyboard.is_pressed('space'):
            displayScreen = "play"
        elif keyboard.is_pressed('i'):
            displayScreen = "instruct"
    elif displayScreen == "instruct":
        instruct()
        if keyboard.is_pressed('escape'):
            displayScreen = "menu"
    elif displayScreen == "play":
        play()
        if keyboard.is_pressed('escape'):
            displayScreen = "menu"
        elif len(lives) == 0:
            myfont = pygame.font.SysFont('Consolas', 93)
            sorry = myfont.render('GAME OVER!', False, yellow)
            screen.blit(sorry, (0, height / 2 - 100))
            displayScreen = "loss"
    elif displayScreen == "loss":
        time.sleep(3)
        loss()
        
    #flips the graphics onto the screen
    pygame.display.flip()
    
pygame.quit()
