#This game is about an undercover alien leaving earth because apocalypse
#initialization
import pygame, random, keyboard, time

#variables
width = 500
height = 600
alienSize = 50
alienX = width / 2
alienY = height - (height / 4) - alienSize
score = 0

#colours
white = (255, 255, 255)
black = (0, 0, 0)
yellow = (253, 210, 82)
ground = (84, 109, 0)
green = (5, 172, 81)
bleen = (32, 161, 133)
sky = (164, 221, 237)
sky2 = (171, 146, 255)
trueBlue = (8, 88, 79)
purpatrate = (181, 126, 220)
pink = (240, 84, 85)
pink2 = (108, 0, 44)

class Lives(pygame.sprite.Sprite):
    def __init__(self, width, height):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface([width, height])

        #loading the image and cutting it
        self.image = pygame.image.load("heart.png").convert_alpha()
        self.mask = pygame.mask.from_surface(self.image)
        self.image = pygame.transform.scale(self.image, (35, 30))
        self.rect = self.image.get_rect()
        self.rect.x = 20
        self.rect.y = 20

#setting up classes for platforms and the player
class Platforms(pygame.sprite.Sprite):
    def __init__(self, width, height):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface([width, height])
        self.image = pygame.transform.scale(self.image, (100, 20))
        self.mask = pygame.mask.from_surface(self.image)
        self.rect = self.image.get_rect()
        self.colourG = 255
        self.colourB = 143
        self.changeY = 0
        self.shift = 0
        self.ii = (0, 80, 200)
        self.why = 0
        self.bye = 0
        self.shy = 0

    def update(self):
        self.image.fill(self.ii)
        self.rect.y += self.changeY


    #for platform changing colour
    def colourChange(self):
        if self.colourG > 0.10:
            self.colourG -= 0.05
        if self.colourB < 255.90:
            self.colourB += 0.05
    def fall(self):
        self.shy = height / 2 - alien.rect.y
        print(self.shy, height/ 2, alien.rect.y)
        if self.shy != 0 and self.shy > 0:
            self.rect.y += 1
        else:
            self.rect.y +=0
    def shifts(self):
        if self.shift == 0:
            self.shift = 1.9
    def herps(self):
        self.why += 9
        if self.why == 81 * 90:
            self.ii = (69, 69, 69)
        elif self.why == 81 *180:
            self.ii = (9,40,135)
        elif self.why == 81 *270:
            self.ii = (100, 80, 90)

class Player(pygame.sprite.Sprite):
    def __init__(self, width, height):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface([width, height])

        #loading the image and cutting it
        self.image = pygame.image.load("lamb.png").convert_alpha()
        self.mask = pygame.mask.from_surface(self.image)
        self.image = pygame.transform.scale(self.image, (50, 50))

        #defining variables for size, location and jumping
        self.rect = self.image.get_rect()
        self.rect.x = 250
        self.rect.y = height - (height / 4) - alienSize
        self.changeX = 0
        self.changeY = 0
        self.gravity = 0
        self.colourG = 255
        self.colourB = 143

    def update(self):
        self.rect.x += self.changeX
        self.rect.y -= self.changeY
        self.changeY -= self.gravity

    #checking for left and right boundaries and player movement functions ... and colour
    def right(self):
        self.changeX = 2
    def left(self):
        self.changeX = -2
    def bounce(self):
        self.changeX *= -1
    def jumpUp(self):
        if self.changeY == 0:
            self.changeY = 4.5
            self.gravity = 0.09
        if self.colourG > 0.10:
            self.colourG -= 0.05
        if self.colourB < 255.90:
            self.colourB += 0.05
    def stopX(self):
        self.changeX = 0
    def stopY(self):
        self.rect.y = alienY + 1
        self.changeY = 0
        self.gravity = 0

pygame.init()
pygame.font.init()

#setting up the game screen
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("hah")

#time and frames?
clock = pygame.time.Clock()
clock.tick(60)
pygame.time.set_timer(pygame.USEREVENT, 1000)

gaming = True
myfont = pygame.font.SysFont('Consolas', 20)

#setting up sprite groups
platforms = pygame.sprite.Group()
lives = pygame.sprite.Group()
all = pygame.sprite.Group()
alien = Player(width, height)
all.add(alien)
changeHeartX = 20
changePlatY = 400
for i in range (7):
    block = Platforms(width, height + 200)
    if i == 1:
        block.rect.x = 0
        block.rect.y = height - (height / 4)
        block.image = pygame.transform.scale(block.image, (width, round(height - (height / 4))))
    else:
        block.rect.x = random.randrange(0, width - 100)
        block.rect.y = changePlatY
        block.image = pygame.transform.scale(block.image, (100, 20))
    changePlatY -= 100
    platforms.add(block)
    all.add(block)
for j in range (3):
    heart = Lives(width, height)
    heart.rect.x = changeHeartX
    heart.rect.y = 20
    changeHeartX += 43
    lives.add(heart)
    all.add(heart)

def play():
   #the ground and sky
    moonrise = (alien.colourG, alien.colourG, alien.colourG)
    dirt = (69, alien.colourG, alien.colourB)
    screen.fill(moonrise)

    scoreWrite = myfont.render("Score: " + str(score), False, (46, 72, 89))
    screen.blit(scoreWrite, (width - 110, 20))

    #for player jumping and colour changing
    if keyboard.is_pressed('up'):
        alien.jumpUp()
        for aBlock in platforms:
            aBlock.colourChange()

    changePlatY = 400
    for p in platforms:
        if p.rect.y > height:
            p.kill()
            for i in range(1):
                block = Platforms(width, height)
                block.rect.x = random.randrange(0, width - 100)
                block.rect.y = changePlatY
                changePlatY -= 60
                platforms.add(block)
                all.add(block)


    for ul in lives:
        if alien.rect.y > height:
            ul.kill()
        print('lllllllllllllllll')

   #drawing all sprites (platforms and player)
    all.update()
    all.draw(screen)
pp = False
while gaming:
    # checking for arrow keys (for going back to the menu screen and player movement)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            gaming = False
        if event.type == pygame.USEREVENT and pp == True:
            score += 1
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                alien.left()
            elif event.key == pygame.K_RIGHT:
                alien.right()
        elif event.type == pygame.KEYUP:
            alien.stopX()

    #checking for right and left boundaries
    if alien.rect.x < 0 or alien.rect.x > width - alienSize:
        alien.bounce()
    for falling in platforms:
        if alien.rect.y < height / 2:
            falling.fall()
            pp = True

    #checking for sprite collisions
    for onePlatform in platforms:
        if pygame.sprite.collide_rect(alien, onePlatform):
            alien.changeY = 0
            #onePlatform.fall()
            onePlatform.herps()
            if onePlatform.ii == (100, 80, 90):
                onePlatform.kill()

    #print(len(platforms))

    play()

    #flips the graphics onto the screen
    pygame.display.flip()
pygame.quit()
